{"version":3,"sources":["components/HeatMap.js","components/StringInput.js","App.js","reportWebVitals.js","index.js"],"names":["HeatMap","props","min","Math","data","map","col","max","rows","Row","md","xLabels","length","className","Col","val","j","yLabels","row","push","style","scale","Container","StringInput","state","value","handleChange","bind","onClick","event","this","setState","target","test","key","preventDefault","vals","split","errors","strings","Set","forEach","item","index","add","onVisualise","Array","from","sort","left","right","parseInt","alert","onChange","onPaste","onKeyPress","Component","viridisColorscale","hammingDistance","stringA","stringB","dist","abs","i","charAt","App","hammingMatrix","chroma","handleVisualise","size","matrix","fill","console","log","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2113b51c.chunk.js","sourcesContent":["import React from 'react';\nimport './HeatMap.css';\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nfunction HeatMap(props) {\n  /**\n  var columns = [props.yLabels.map(val => // Create first column from the yLabels.\n    <Row className='yLabel'>\n      {val}\n    </Row>\n  )];\n\n\n  for(var i = 0; i < props.xLabels.length; i++) {\n    columns.push([                            // add the correct X label.\n      <Row>\n        <div className='xLabel rotate'>\n          {props.xLabels[i]}\n        </div>\n      </Row>\n    ]);\n\n    for(var j = 0; j < props.yLabels.length; j++)\n      columns[i+1].push(                      // Add all the data in the column\n        <Row className='data'>\n          {props.data[i][j]}\n        </Row>\n      );\n  }\n                                              // wrap all the columns in a <Col>\n  var table = columns.map(column => <div className='col align-items-end'>{column}</div>);\n  */\n  const min = Math.min(...props.data.map(col => Math.min(...col)));\n  const max = Math.max(...props.data.map(col => Math.max(...col)));\n\n  // Create X axis labels.\n  var rows = [\n    <Row md={props.xLabels.length + 1} className=\"xLabels\">\n      <Col>x</Col>\n      {props.xLabels.map( val => <Col>{val}</Col>)}\n    </Row>\n  ];\n\n  for(var j = 0; j < props.yLabels.length; j++){\n    // Create Y Axis label.\n    var row = [<Col className=\"yLabels\"> {props.yLabels[j]} </Col>];\n    \n    // Fill row with data.\n    row.push(props.data[j].map(val =>\n      <Col className=\"data\" style={{\"background-color\": props.scale((val-min)/(max-min))}}>\n        {val}\n      </Col>\n    ));\n    rows.push(<Row>{row}</Row>);\n  }\n\n  return (\n    <Container>\n      {rows}\n    </Container>\n  );\n}\n\nexport default HeatMap;\n","import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass StringInput extends Component {\n  constructor(props){\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChange(event) {\n    // keypress handles input checking so just set the internal state here.\n    this.setState({value: event.target.value});\n  }\n\n  onKeyPress(event) {\n    // Check that the key is 0-9 or enter, if it isn't cancel it.\n    if(!(/[0-9]|Enter/.test(event.key)))\n      event.preventDefault();\n  }\n\n  onPaste(event) {\n    // Check that the pasted content only contains 0-9 or '\\n'.\n    if(!(/[0-9\\n]*/.test(event.target.value))) {\n      event.preventDefault();\n    }\n  }\n\n  onClick(event) {\n    // check the input and lift the state up.\n\n    const vals = this.state.value.split(\"\\n\"); // Split the text field by lines\n\n    var errors = [];                          // List of lines with errors.\n    var strings = new Set();                  // We don't need duplicates so we\n                                              // can use a set.\n\n    vals.forEach((item, index) => {           // Check that every line\n      if(item !== \"\"){                        // is either empty\n        if(!(/^[0-9]{5}$/.test(item))){       // or 5 digits.\n          errors.push(index);\n        } else {\n          strings.add(item);\n        }\n      }\n    });\n\n    if(errors.length !== 0) {                 // If we have any errors, notify\n      alert(\"Errors on lines: \" + errors);    // the user of them and don't\n      return;                                 // visualise the data.\n    }\n\n\n                                              // Sort the set as an array and\n                                              // lift it up.\n    this.props.onVisualise(Array.from(strings).sort((left, right) => {\n      return parseInt(left) - parseInt(right)\n    }));\n  }\n\n  render() {\n    return (\n      <Container>\n        <Col>\n          <Row>\n              <textarea\n                value={this.state.value}\n                onChange={this.handleChange}\n                onPaste={this.onPaste}\n                onKeyPress={this.onKeyPress}\n              />\n          </Row>\n          <Row>\n              <button onClick={this.onClick}>Visualise</button>\n          </Row>\n        </Col>\n      </Container>\n    )\n  }\n}\n\nexport default StringInput;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nimport HeatMap from './components/HeatMap.js'\nimport StringInput from './components/StringInput.js'\n\nimport chroma from 'chroma-js';\n\nconst viridisColorscale = ['#fafa6e', '#9cdf7c', '#4abd8c', '#00968e', '#106e7c', '#2a4858'];\n\nfunction hammingDistance(stringA, stringB) {\n  var length = Math.min(stringA.length, stringB.length);\n  var dist = Math.abs(stringA.length - stringB.length);\n  for (var i = 0; i < length; i++)\n    if (stringA.charAt(i) !== stringB.charAt(i))\n      dist++;\n\n  return dist;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {strings: [], hammingMatrix: [], scale: chroma.scale(viridisColorscale)};\n\n    this.handleVisualise = this.handleVisualise.bind(this);\n  }\n\n\n  handleVisualise(strings) {\n    const size = strings.length;\n\n    var matrix = [];\n\n    for (var i = 0; i < size; i++)\n      matrix.push(Array(size).fill(0));\n\n    for (i = 0; i < size; i++)\n      for (var j = i+1; j < size; j++)\n        matrix[i][j] = matrix[j][i] = hammingDistance(strings[i], strings[j]);\n\n    console.log(matrix);\n    this.setState({\n      strings: strings,\n      hammingMatrix: matrix\n    });\n  }\n\n  render() {\n    var items = this.state.strings.map(value =>\n      <li key={value}>\n        {value}\n      </li>\n    );\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <StringInput onVisualise={this.handleVisualise}/>\n            </Col>\n            <Col>\n              <HeatMap\n                xLabels={this.state.strings}\n                yLabels={this.state.strings}\n                data={this.state.hammingMatrix}\n                scale={this.state.scale}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}