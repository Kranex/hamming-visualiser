{"version":3,"sources":["components/StringInput.js","App.js","reportWebVitals.js","index.js"],"names":["StringInput","props","state","value","handleChange","bind","onClick","event","this","setState","target","key","test","preventDefault","vals","split","strings","Set","errors","forEach","item","index","add","push","length","alert","onVisualise","Array","from","sort","left","right","parseInt","Container","Col","Row","onChange","onPaste","onKeyPress","Component","App","handleVisualise","items","map","className","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SA+EeA,E,kDAvEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBALC,E,yDAQLE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,U,iCAG1BI,GACT,IAAMI,EAAMJ,EAAMI,IACb,cAAcC,KAAKD,IACtBJ,EAAMM,mB,8BAGFN,GACD,WAAWK,KAAKL,EAAMG,OAAOP,QAChCI,EAAMM,mB,8BAIFN,GACN,IAAMO,EAAON,KAAKN,MAAMC,MAAMY,MAAM,MAEhCC,EAAU,IAAIC,IACdC,EAAS,GACbJ,EAAKK,SAAQ,SAACC,EAAMC,GACN,KAATD,IACI,aAAaR,KAAKQ,GAGrBJ,EAAQM,IAAIF,GAFZF,EAAOK,KAAKF,OAOG,IAAlBH,EAAOM,SACRC,MAAM,oBAAsBP,GAC5BX,EAAMM,kBAIRL,KAAKP,MAAMyB,YAAYC,MAAMC,KAAKZ,GAASa,MAAK,SAACC,EAAMC,GACrD,OAAOC,SAASF,GAAQE,SAASD,S,+BAKnC,OACE,cAACE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACI,0BACEhC,MAAOK,KAAKN,MAAMC,MAClBiC,SAAU5B,KAAKJ,aACfiC,QAAS7B,KAAK6B,QACdC,WAAY9B,KAAK8B,eAGvB,cAACH,EAAA,EAAD,UACI,wBAAQ7B,QAASE,KAAKF,QAAtB,kC,GAhEYiC,aCyCXC,E,kDApCb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACc,QAAS,IAEvB,EAAKyB,gBAAkB,EAAKA,gBAAgBpC,KAArB,gBAJN,E,4DAOHW,GACdR,KAAKC,SAAS,CACZO,QAASA,M,+BAKX,IAAI0B,EAAQlC,KAAKN,MAAMc,QAAQ2B,KAAI,SAAAxC,GAAK,OACtC,6BACGA,GADMA,MAIX,OACE,qBAAKyC,UAAU,MAAf,SACE,cAACX,EAAA,EAAD,CAAWY,OAAK,EAAhB,SACE,eAACV,EAAA,EAAD,WACE,cAACD,EAAA,EAAD,UACE,cAAC,EAAD,CAAaR,YAAalB,KAAKiC,oBAEjC,cAACP,EAAA,EAAD,UACGQ,e,GA5BGH,aCCHO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69613d2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass StringInput extends Component {\n  constructor(props){\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  onKeyPress(event) {\n    const key = event.key;\n    if(!(/[0-9]|Enter/.test(key)))\n      event.preventDefault();\n  }\n\n  onPaste(event) {\n    if(!(/[0-9]|\\n/.test(event.target.value))) {\n      event.preventDefault();\n    }\n  }\n\n  onClick(event) {\n    const vals = this.state.value.split(\"\\n\"); // Split the text field by lines\n\n    var strings = new Set();\n    var errors = [];                         // Init error lines.\n    vals.forEach((item, index) => {\n      if(item !== \"\"){\n        if(!(/^[0-9]{5}$/.test(item))){\n          errors.push(index);\n        } else {\n          strings.add(item);\n        }\n      }\n    });\n\n    if(errors.length !== 0) {\n      alert(\"Errors on lines: \" + errors);\n      event.preventDefault();\n    }\n\n\n    this.props.onVisualise(Array.from(strings).sort((left, right) => {\n      return parseInt(left) - parseInt(right)\n    }));\n  }\n\n  render() {\n    return (\n      <Container>\n        <Col>\n          <Row>\n              <textarea\n                value={this.state.value}\n                onChange={this.handleChange}\n                onPaste={this.onPaste}\n                onKeyPress={this.onKeyPress}\n              />\n          </Row>\n          <Row>\n              <button onClick={this.onClick}>Visualise</button>\n          </Row>\n        </Col>\n      </Container>\n    )\n  }\n}\n\nexport default StringInput;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nimport StringInput from './components/StringInput.js'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {strings: []};\n\n    this.handleVisualise = this.handleVisualise.bind(this);\n  }\n\n  handleVisualise(strings) {\n    this.setState({\n      strings: strings\n    });\n  }\n\n  render() {\n    var items = this.state.strings.map(value =>\n      <li key={value}>\n        {value}\n      </li>\n    );\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <StringInput onVisualise={this.handleVisualise}/>\n            </Col>\n            <Col>\n              {items}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}