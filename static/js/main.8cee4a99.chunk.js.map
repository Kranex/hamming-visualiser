{"version":3,"sources":["components/StringInput.js","App.js","reportWebVitals.js","index.js"],"names":["StringInput","props","state","value","handleChange","bind","onClick","event","this","setState","target","key","test","preventDefault","vals","split","errors","strings","Set","forEach","item","index","add","push","length","alert","onVisualise","Array","from","sort","left","right","parseInt","Container","Col","Row","onChange","onPaste","onKeyPress","Component","hammingDistance","stringA","stringB","Math","min","dist","abs","i","charAt","App","hammingMatrix","handleVisualise","size","matrix","fill","j","console","log","map","className","fluid","squares","xLabels","yLabels","data","cellStyle","background","max","x","y","fontSize","cellRender","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cee4a99.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nclass StringInput extends Component {\n  constructor(props){\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  onKeyPress(event) {\n    const key = event.key;\n    if(!(/[0-9]|Enter/.test(key)))\n      event.preventDefault();\n  }\n\n  onPaste(event) {\n    if(!(/[0-9\\n]*/.test(event.target.value))) {\n      event.preventDefault();\n    }\n  }\n\n  onClick(event) {\n    const vals = this.state.value.split(\"\\n\"); // Split the text field by lines\n\n    var errors = [];                          // List of lines with errors.\n    var strings = new Set();                  // We don't need duplicates so we\n                                              // can use a set.\n\n    vals.forEach((item, index) => {           // Check that every line\n      if(item !== \"\"){                        // is either empty\n        if(!(/^[0-9]{5}$/.test(item))){       // or 5 digits.\n          errors.push(index);\n        } else {\n          strings.add(item);\n        }\n      }\n    });\n\n    if(errors.length !== 0) {                 // If we have any errors, notify\n      alert(\"Errors on lines: \" + errors);    // the user of them and don't\n      event.preventDefault();                 // visualise the data.\n    }\n\n\n                                              // Sort the set as an array and\n                                              // lift it up.\n    this.props.onVisualise(Array.from(strings).sort((left, right) => {\n      return parseInt(left) - parseInt(right)\n    }));\n  }\n\n  render() {\n    return (\n      <Container>\n        <Col>\n          <Row>\n              <textarea\n                value={this.state.value}\n                onChange={this.handleChange}\n                onPaste={this.onPaste}\n                onKeyPress={this.onKeyPress}\n              />\n          </Row>\n          <Row>\n              <button onClick={this.onClick}>Visualise</button>\n          </Row>\n        </Col>\n      </Container>\n    )\n  }\n}\n\nexport default StringInput;\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Container from 'react-bootstrap/Container'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nimport HeatMap from 'react-heatmap-grid'\n\nimport StringInput from './components/StringInput.js'\n\nfunction hammingDistance(stringA, stringB) {\n  var length = Math.min(stringA.length, stringB.length);\n  var dist = Math.abs(stringA.length - stringB.length);\n  for (var i = 0; i < length; i++)\n    if (stringA.charAt(i) !== stringB.charAt(i))\n      dist++;\n\n  return dist;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {strings: [''], hammingMatrix: [[0]]};\n\n    this.handleVisualise = this.handleVisualise.bind(this);\n  }\n\n\n  handleVisualise(strings) {\n    const size = strings.length;\n\n    var matrix = [];\n\n    for (var i = 0; i < size; i++)\n      matrix.push(Array(size).fill(0));\n\n    for (i = 0; i < size; i++)\n      for (var j = i+1; j < size; j++)\n        matrix[i][j] = matrix[j][i] = hammingDistance(strings[i], strings[j]);\n\n    console.log(matrix);\n    this.setState({\n      strings: strings,\n      hammingMatrix: matrix\n    });\n  }\n\n  render() {\n    var items = this.state.strings.map(value =>\n      <li key={value}>\n        {value}\n      </li>\n    );\n\n    return (\n      <div className=\"App\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <StringInput onVisualise={this.handleVisualise}/>\n            </Col>\n            <Col>\n              <HeatMap\n                squares\n                xLabels={this.state.strings}\n                yLabels={this.state.strings}\n                data={this.state.hammingMatrix}\n                cellStyle={(background, value, min, max, data, x, y) => ({\n                  background: `rgba(66, 86, 244, ${1 - (max - value) / (max - min)})`,\n                  fontSize: \"11px\",\n                })}\n                cellRender={value => value && `${value}`}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}